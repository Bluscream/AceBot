{
	"#AllowSameLineComments": {
		"desc": "Removed in v1.1.09: AutoIt scripts are no longer supported.",
		"dir": "commands/_AllowSameLineComments.htm",
		"syntax": "#AllowSameLineComments"
	},
	"#ClipboardTimeout": {
		"desc": "Changes how long the script keeps trying to access the clipboard when the first attempt fails.",
		"dir": "commands/_ClipboardTimeout.htm",
		"syntax": "#ClipboardTimeout Milliseconds"
	},
	"#CommentFlag": {
		"desc": "Changes the script's comment symbol from semicolon to some other string.",
		"dir": "commands/_CommentFlag.htm",
		"syntax": "#CommentFlag NewString"
	},
	"#ErrorStdOut": {
		"desc": "Sends any syntax error that prevents a script from launching to stderr rather than displaying a dialog.",
		"dir": "commands/_ErrorStdOut.htm",
		"syntax": "#ErrorStdOut"
	},
	"#EscapeChar (and explanation of escape sequences)": {
		"desc": "Changes the script's escape character (e.g. accent vs. backslash).",
		"dir": "commands/_EscapeChar.htm",
		"syntax": "#EscapeChar NewChar"
	},
	"#HotkeyInterval": {
		"desc": "Along with #MaxHotkeysPerInterval, specifies the rate of hotkey activations beyond which a warning dialog will be displayed.",
		"dir": "commands/_HotkeyInterval.htm",
		"syntax": "#HotkeyInterval Milliseconds"
	},
	"#HotkeyModifierTimeout": {
		"desc": "Affects the behavior of hotkey modifiers: CTRL, ALT, WIN, and SHIFT.",
		"dir": "commands/_HotkeyModifierTimeout.htm",
		"syntax": "#HotkeyModifierTimeout Milliseconds"
	},
	"#Hotstring": {
		"desc": "Changes hotstring options or ending characters.",
		"dir": "commands/_Hotstring.htm",
		"syntax": "#Hotstring NoMouse\n#Hotstring EndChars NewChars\n#Hotstring NewOptions"
	},
	"#If": {
		"desc": "Creates context-sensitive hotkeys and hotstrings. Such hotkeys perform a different action (or none at all) depending on the result of an expression.",
		"dir": "commands/_If.htm",
		"syntax": "#If [, Expression ]"
	},
	"#IfTimeout": {
		"desc": "Sets the maximum time that may be spent evaluating a single #If expression.",
		"dir": "commands/_IfTimeout.htm",
		"syntax": "#IfTimeout Timeout"
	},
	"#IfWinActive / #IfWinExist": {
		"desc": "Creates context-sensitive hotkeys and hotstrings. Such hotkeys perform a different action (or none at all) depending on the type of window that is active or exists.",
		"dir": "commands/_IfWinActive.htm",
		"syntax": "#IfWinActive [, WinTitle, WinText]\n#IfWinExist [, WinTitle, WinText]\n#IfWinNotActive [, WinTitle, WinText]\n#IfWinNotExist [, WinTitle, WinText]\n#If [, Expression]"
	},
	"#Include": {
		"desc": "Causes the script to behave as though the specified file's contents are present at this exact position.",
		"dir": "commands/_Include.htm",
		"syntax": "#Include FileOrDirName\n#Include LibName\n#IncludeAgain FileOrDirName"
	},
	"#InputLevel": {
		"desc": "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.",
		"dir": "commands/_InputLevel.htm",
		"syntax": "#InputLevel [, Level]"
	},
	"#InstallKeybdHook": {
		"desc": "Forces the unconditional installation of the keyboard hook.",
		"dir": "commands/_InstallKeybdHook.htm",
		"syntax": "#InstallKeybdHook"
	},
	"#InstallMouseHook": {
		"desc": "Forces the unconditional installation of the mouse hook.",
		"dir": "commands/_InstallMouseHook.htm",
		"syntax": "#InstallMouseHook"
	},
	"#KeyHistory": {
		"desc": "Sets the maximum number of keyboard and mouse events displayed by the KeyHistory window. You can set it to 0 to disable key history.",
		"dir": "commands/_KeyHistory.htm",
		"syntax": "#KeyHistory MaxEvents"
	},
	"#MaxHotkeysPerInterval": {
		"desc": "Along with #HotkeyInterval, specifies the rate of hotkey activations beyond which a warning dialog will be displayed.",
		"dir": "commands/_MaxHotkeysPerInterval.htm",
		"syntax": "#MaxHotkeysPerInterval Value"
	},
	"#MaxMem": {
		"desc": "Sets the maximum capacity of each variable to the specified number of megabytes.",
		"dir": "commands/_MaxMem.htm",
		"syntax": "#MaxMem Megabytes"
	},
	"#MaxThreads": {
		"desc": "Sets the maximum number of simultaneous threads.",
		"dir": "commands/_MaxThreads.htm",
		"syntax": "#MaxThreads Value"
	},
	"#MaxThreadsBuffer": {
		"desc": "Causes some or all hotkeys to buffer rather than ignore keypresses when their #MaxThreadsPerHotkey limit has been reached.",
		"dir": "commands/_MaxThreadsBuffer.htm",
		"syntax": "#MaxThreadsBuffer On|Off"
	},
	"#MaxThreadsPerHotkey": {
		"desc": "Sets the maximum number of simultaneous threads per hotkey or hotstring.",
		"dir": "commands/_MaxThreadsPerHotkey.htm",
		"syntax": "#MaxThreadsPerHotkey Value"
	},
	"#MenuMaskKey": {
		"desc": "Changes which key is used to mask Win or Alt keyup events.",
		"dir": "commands/_MenuMaskKey.htm",
		"syntax": "#MenuMaskKey KeyName"
	},
	"#NoEnv": {
		"desc": "Avoids checking empty variables to see if they are environment variables (recommended for all new scripts).",
		"dir": "commands/_NoEnv.htm",
		"syntax": "#NoEnv"
	},
	"#NoTrayIcon": {
		"desc": "Disables the showing of a tray icon.",
		"dir": "commands/_NoTrayIcon.htm",
		"syntax": "#NoTrayIcon"
	},
	"#Persistent": {
		"desc": "Keeps a script permanently running (that is, until the user closes it or ExitApp is encountered).",
		"dir": "commands/_Persistent.htm",
		"syntax": "#Persistent"
	},
	"#SingleInstance": {
		"desc": "Determines whether a script is allowed to run again when it is already running.",
		"dir": "commands/_SingleInstance.htm",
		"syntax": "#SingleInstance [force|ignore|off]"
	},
	"#UseHook": {
		"desc": "Forces the use of the  hook to implement all or some keyboard hotkeys.",
		"dir": "commands/_UseHook.htm",
		"syntax": "#UseHook [On|Off]"
	},
	"#Warn": {
		"desc": "Enables or disables warnings for specific conditions which may indicate an error, such as a typo or missing \"global\" declaration.",
		"dir": "commands/_Warn.htm",
		"syntax": "#Warn [, WarningType, WarningMode]"
	},
	"#WinActivateForce": {
		"desc": "Skips the gentle method of activating a window and goes straight to the forceful method.",
		"dir": "commands/_WinActivateForce.htm",
		"syntax": "#WinActivateForce"
	},
	"Alphabetical Command and Function Index": {
		"desc": "Click on a command or function name for details. Entries in large font are the most commonly used.",
		"dir": "commands/index.htm"
	},
	"Arrays": {
		"desc": "Self-contained associative arrays can be created by calling Object(). For example:",
		"dir": "misc/Arrays.htm"
	},
	"Asc()": {
		"desc": "Returns the numeric value of the first byte or UTF-16 code unit in the specified string.",
		"dir": "commands/Asc.htm",
		"syntax": "Number := Asc(String)"
	},
	"AutoTrim": {
		"desc": "Determines whether Var1 = %Var2% statements omit spaces and tabs from the beginning and end of Var2.",
		"dir": "commands/AutoTrim.htm",
		"syntax": "AutoTrim, On|Off"
	},
	"BlockInput": {
		"desc": "Disables or enables the user's ability to interact with the computer via keyboard and mouse.",
		"dir": "commands/BlockInput.htm",
		"syntax": "BlockInput, Mode"
	},
	"Blocks": {
		"desc": "A pair of braces denotes a block. Blocks are typically used with functions, Else, Loop, While-loop, and IF-commands.",
		"dir": "commands/Block.htm",
		"syntax": "\n{\nzero or more commands\n}"
	},
	"Break": {
		"desc": "Exits (terminates) a loop. Valid inside any kind of loop.",
		"dir": "commands/Break.htm",
		"syntax": "Break [, LoopLabel]"
	},
	"Catch": {
		"desc": "Specifies the code to execute if an exception is raised during execution of a try statement.",
		"dir": "commands/Catch.htm"
	},
	"Chr()": {
		"desc": "Returns the string (usually a single character) corresponding to the character code indicated by the specified number.",
		"dir": "commands/Chr.htm",
		"syntax": "String := Chr(Number)"
	},
	"Click": {
		"desc": "Clicks a mouse button at the specified coordinates. It can also hold down a mouse button, turn the mouse wheel, or move the mouse.",
		"dir": "commands/Click.htm"
	},
	"Clipboard and ClipboardAll": {
		"desc": "Clipboard is a built-in variable that reflects the current contents of the Windows clipboard if those contents can be expressed as text. By contrast, ClipboardAll contains everything on the clipboard, such as pictures and formatting.",
		"dir": "misc/Clipboard.htm"
	},
	"ClipWait": {
		"desc": "Waits until the clipboard contains data.",
		"dir": "commands/ClipWait.htm",
		"syntax": "ClipWait [, SecondsToWait, 1]"
	},
	"CLSID List (Windows Class Identifiers)": {
		"desc": "Certain special folders within the operating system are identified by unique strings.  Some of these strings can be used with FileSelectFile, FileSelectFolder, and Run. For example:",
		"dir": "misc/CLSID-List.htm"
	},
	"ComObjActive()": {
		"desc": "Retrieves a running object that has been registered with OLE.",
		"dir": "commands/ComObjActive.htm",
		"syntax": "ComObject := ComObjActive(CLSID)"
	},
	"ComObjArray()": {
		"desc": "Creates a SafeArray for use with COM.",
		"dir": "commands/ComObjArray.htm",
		"syntax": "ArrayObj := ComObjArray(VarType, Count1 [, Count2, ... Count8])"
	},
	"ComObjConnect()": {
		"desc": "Connects the object's event sources to functions with a given prefix.",
		"dir": "commands/ComObjConnect.htm",
		"syntax": "ComObjConnect(ComObject [, Prefix])"
	},
	"ComObjCreate()": {
		"desc": "Creates a COM object.",
		"dir": "commands/ComObjCreate.htm",
		"syntax": "ComObject := ComObjCreate(CLSID [, IID])"
	},
	"ComObjError()": {
		"desc": "Enables or disables notification of COM errors.",
		"dir": "commands/ComObjError.htm",
		"syntax": "Enabled := ComObjError([Enable])"
	},
	"ComObjFlags()": {
		"desc": "Retrieves or changes flags which control a COM wrapper object's behaviour.",
		"dir": "commands/ComObjFlags.htm",
		"syntax": "Flags := ComObjFlags(ComObject [, NewFlags, Mask])"
	},
	"ComObjGet()": {
		"desc": "Returns a reference to an object provided by a COM component.",
		"dir": "commands/ComObjGet.htm",
		"syntax": "ComObject := ComObjGet(Name)"
	},
	"ComObjQuery()": {
		"desc": "Queries a COM object for an interface or service.",
		"dir": "commands/ComObjQuery.htm",
		"syntax": "InterfacePointer := ComObjQuery(ComObject, [SID,] IID)"
	},
	"ComObjType()": {
		"desc": "Retrieves type information from a COM object.",
		"dir": "commands/ComObjType.htm",
		"syntax": "\nVarType := ComObjType(ComObject)\nIName   := ComObjType(ComObject, \"Name\")\nIID     := ComObjType(ComObject, \"IID\")\nCName   := ComObjType(ComObject, \"Class\")  ; v1.1.26+\nCLSID   := ComObjType(ComObject, \"CLSID\")  ; v1.1.26+\n"
	},
	"ComObjValue()": {
		"desc": "Retrieves the value or pointer stored in a COM wrapper object.",
		"dir": "commands/ComObjValue.htm",
		"syntax": "Value := ComObjValue(ComObject)"
	},
	"Continue": {
		"desc": "Skips the rest of the current loop iteration and begins a new one. Valid inside any kind of loop.",
		"dir": "commands/Continue.htm",
		"syntax": "Continue [, LoopLabel]"
	},
	"Control": {
		"desc": "Makes a variety of changes to a control.",
		"dir": "commands/Control.htm",
		"syntax": "Control, Cmd [, Value, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"ControlClick": {
		"desc": "Sends a mouse  button or mouse wheel event to a  control.",
		"dir": "commands/ControlClick.htm",
		"syntax": "ControlClick [, Control-or-Pos, WinTitle, WinText, WhichButton, ClickCount, Options, ExcludeTitle, ExcludeText]"
	},
	"ControlFocus": {
		"desc": "Sets input focus to a given control on a window.",
		"dir": "commands/ControlFocus.htm",
		"syntax": "ControlFocus [, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"ControlGet": {
		"desc": "Retrieves various types of information about a control.",
		"dir": "commands/ControlGet.htm",
		"syntax": "ControlGet, OutputVar, Cmd [, Value, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"ControlGetFocus": {
		"desc": "Retrieves which control of the target window has input focus, if any.",
		"dir": "commands/ControlGetFocus.htm",
		"syntax": "ControlGetFocus, OutputVar [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"ControlGetPos": {
		"desc": "Retrieves the position and size of a control.",
		"dir": "commands/ControlGetPos.htm",
		"syntax": "ControlGetPos [, X, Y, Width, Height, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"ControlGetText": {
		"desc": "Retrieves text from a control.",
		"dir": "commands/ControlGetText.htm",
		"syntax": "ControlGetText, OutputVar [, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"ControlMove": {
		"desc": "Moves or resizes a control.",
		"dir": "commands/ControlMove.htm",
		"syntax": "ControlMove, Control, X, Y, Width, Height [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"ControlSend / ControlSendRaw": {
		"desc": "Sends simulated keystrokes to a window or control.",
		"dir": "commands/ControlSend.htm",
		"syntax": "ControlSend [, Control, Keys, WinTitle, WinText, ExcludeTitle, ExcludeText]\nControlSendRaw: Same parameters as above."
	},
	"ControlSetText": {
		"desc": "Changes the text of a control.",
		"dir": "commands/ControlSetText.htm",
		"syntax": "ControlSetText [, Control, NewText, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"CoordMode": {
		"desc": "Sets coordinate mode for various commands to be relative to either the active window or the screen.",
		"dir": "commands/CoordMode.htm",
		"syntax": "CoordMode, ToolTip|Pixel|Mouse|Caret|Menu [, Screen|Window|Client]"
	},
	"Creating a Keyboard Macro or Mouse Macro": {
		"desc": "A macro is a series of scripted actions that is played upon demand. The most common activity of a macro is to send simulated keystrokes and mouse clicks to one or more windows. Such windows respond to each keystroke and mouse click as though you had performed it manually, which allows repetitive tasks to be automated with high speed and reliability.",
		"dir": "misc/Macros.htm"
	},
	"Critical": {
		"desc": "Prevents the current thread from being interrupted by other threads, or enables it to be interrupted.",
		"dir": "commands/Critical.htm",
		"syntax": "Critical [, Off]\nCritical 50 ; See bottom of remarks."
	},
	"DetectHiddenText": {
		"desc": "Determines whether invisible text in a window is seen for the purpose of finding the window. This affects commands such as IfWinExist and WinActivate.",
		"dir": "commands/DetectHiddenText.htm",
		"syntax": "DetectHiddenText, On|Off"
	},
	"DetectHiddenWindows": {
		"desc": "Determines whether invisible windows are seen by the script.",
		"dir": "commands/DetectHiddenWindows.htm",
		"syntax": "DetectHiddenWindows, On|Off"
	},
	"DllCall": {
		"desc": "Calls a function inside a DLL, such as a standard Windows API function.",
		"dir": "commands/DllCall.htm",
		"syntax": "Result := DllCall([DllFile\\]Function [, Type1, Arg1, Type2, Arg2, Cdecl ReturnType])"
	},
	"Drive": {
		"desc": "Ejects/retracts the tray in a CD or DVD drive, or sets a drive's volume label.",
		"dir": "commands/Drive.htm",
		"syntax": "Drive, Sub-command [, Drive , Value]"
	},
	"DriveGet": {
		"desc": "Retrieves various types of information about the computer's drive(s).",
		"dir": "commands/DriveGet.htm",
		"syntax": "DriveGet, OutputVar, Cmd [, Value]"
	},
	"DriveSpaceFree": {
		"desc": "Retrieves the free disk space of a drive, in Megabytes.",
		"dir": "commands/DriveSpaceFree.htm",
		"syntax": "DriveSpaceFree, OutputVar, Path"
	},
	"Edit": {
		"desc": "Opens the current script for editing in the associated editor.",
		"dir": "commands/Edit.htm",
		"syntax": "Edit"
	},
	"Else": {
		"desc": "Specifies the command(s) to perform if an IF-statement evaluates to FALSE. When more than one command is present, enclose them in a block (braces).",
		"dir": "commands/Else.htm",
		"syntax": "Else"
	},
	"Enumerator": {
		"desc": "Allows items in a collection to be enumerated.",
		"dir": "objects/Enumerator.htm"
	},
	"EnvAdd": {
		"desc": "Sets a variable to the sum of itself plus the given value (can also add or subtract time from a date-time value). Synonymous with: var += value.",
		"dir": "commands/EnvAdd.htm",
		"syntax": "EnvAdd, Var, Value [, TimeUnits]\nVar += Value [, TimeUnits]\nVar++"
	},
	"EnvDiv": {
		"desc": "Sets a variable to itself divided by the given value. Synonymous with: Var /= Value.",
		"dir": "commands/EnvDiv.htm",
		"syntax": "EnvDiv, Var, Value"
	},
	"EnvGet": {
		"desc": "Retrieves an environment variable.",
		"dir": "commands/EnvGet.htm",
		"syntax": "EnvGet, OutputVar, EnvVarName"
	},
	"EnvMult": {
		"desc": "Sets a variable to itself times the given value. Synonymous with: Var *= Value.",
		"dir": "commands/EnvMult.htm",
		"syntax": "EnvMult, Var, Value"
	},
	"EnvSet": {
		"desc": "Writes a value to a variable contained in the  environment.",
		"dir": "commands/EnvSet.htm",
		"syntax": "EnvSet, EnvVar, Value"
	},
	"EnvSub": {
		"desc": "Sets a variable to itself minus the given value (can also compare date-time values). Synonymous with: Var -= Value.",
		"dir": "commands/EnvSub.htm",
		"syntax": "EnvSub, Var, Value [, TimeUnits]\nVar -= Value [, TimeUnits]\nVar--"
	},
	"EnvUpdate": {
		"desc": "Notifies the OS and all running applications that environment variable(s) have changed.",
		"dir": "commands/EnvUpdate.htm",
		"syntax": "EnvUpdate"
	},
	"ErrorLevel": {
		"desc": "This is a built-in variable that is set to indicate the success or failure of some of the commands (not all commands change the value of ErrorLevel). A value of 0 usually indicates success, and any other value usually indicates failure. You can also set the value of ErrorLevel yourself.",
		"dir": "misc/ErrorLevel.htm"
	},
	"Exit": {
		"desc": "Exits the current thread or (if the script is not persistent and contains no hotkeys) the entire script.",
		"dir": "commands/Exit.htm",
		"syntax": "Exit [, ExitCode]"
	},
	"ExitApp": {
		"desc": "Terminates the script unconditionally.",
		"dir": "commands/ExitApp.htm",
		"syntax": "ExitApp [, ExitCode]"
	},
	"File Object": {
		"desc": "Provides an interface for file input/output. FileOpen returns an object of this type.",
		"dir": "objects/File.htm"
	},
	"FileAppend": {
		"desc": "Writes text to the end of a file (first creating the file, if necessary).",
		"dir": "commands/FileAppend.htm",
		"syntax": "FileAppend [, Text, Filename, Encoding]"
	},
	"FileCopy": {
		"desc": "Copies one or more files.",
		"dir": "commands/FileCopy.htm",
		"syntax": "FileCopy, SourcePattern, DestPattern [, Flag]"
	},
	"FileCopyDir": {
		"desc": "Copies a folder along with all its sub-folders and files (similar to xcopy).",
		"dir": "commands/FileCopyDir.htm",
		"syntax": "FileCopyDir, Source, Dest [, Flag]"
	},
	"FileCreateDir": {
		"desc": "Creates a directory/folder.",
		"dir": "commands/FileCreateDir.htm",
		"syntax": "FileCreateDir, DirName"
	},
	"FileCreateShortcut": {
		"desc": "Creates a shortcut (.lnk) file.",
		"dir": "commands/FileCreateShortcut.htm",
		"syntax": "FileCreateShortcut, Target, LinkFile [, WorkingDir, Args, Description, IconFile, ShortcutKey, IconNumber, RunState]"
	},
	"FileDelete": {
		"desc": "Deletes one or more files.",
		"dir": "commands/FileDelete.htm",
		"syntax": "FileDelete, FilePattern"
	},
	"FileEncoding": {
		"desc": "Sets the default encoding for FileRead, FileReadLine, Loop Read, FileAppend, and FileOpen.",
		"dir": "commands/FileEncoding.htm",
		"syntax": "FileEncoding [, Encoding]"
	},
	"FileExist()": {
		"desc": "Checks for the existence of a file or folder and returns its attributes.",
		"dir": "commands/FileExist.htm",
		"syntax": "AttributeString := FileExist(FilePattern)"
	},
	"FileGetAttrib": {
		"desc": "Reports whether a file or folder is read-only, hidden, etc.",
		"dir": "commands/FileGetAttrib.htm",
		"syntax": "FileGetAttrib, OutputVar [, Filename]\nAttributeString := FileExist(FilePattern)"
	},
	"FileGetShortcut": {
		"desc": "Retrieves information about a shortcut (.lnk) file, such as its target file.",
		"dir": "commands/FileGetShortcut.htm",
		"syntax": "FileGetShortcut, LinkFile [, OutTarget, OutDir, OutArgs, OutDescription, OutIcon, OutIconNum, OutRunState]"
	},
	"FileGetSize": {
		"desc": "Retrieves the size of a file.",
		"dir": "commands/FileGetSize.htm",
		"syntax": "FileGetSize, OutputVar [, Filename, Units]"
	},
	"FileGetTime": {
		"desc": "Retrieves the datetime stamp of a file or folder.",
		"dir": "commands/FileGetTime.htm",
		"syntax": "FileGetTime, OutputVar [, Filename, WhichTime]"
	},
	"FileGetVersion": {
		"desc": "Retrieves the version of a file.",
		"dir": "commands/FileGetVersion.htm",
		"syntax": "FileGetVersion, OutputVar [, Filename]"
	},
	"FileInstall": {
		"desc": "Includes the specified file inside the compiled version of the script.",
		"dir": "commands/FileInstall.htm",
		"syntax": "FileInstall, Source, Dest [, Flag]"
	},
	"FileMove": {
		"desc": "Moves or renames one or more files.",
		"dir": "commands/FileMove.htm",
		"syntax": "FileMove, SourcePattern, DestPattern [, Flag]"
	},
	"FileMoveDir": {
		"desc": "Moves a folder along with all its sub-folders and files. It can also rename a folder.",
		"dir": "commands/FileMoveDir.htm",
		"syntax": "FileMoveDir, Source, Dest [, Flag]"
	},
	"FileOpen": {
		"desc": "Opens a file.",
		"dir": "commands/FileOpen.htm",
		"syntax": "file := FileOpen(Filename, Flags [, Encoding])"
	},
	"FileRead": {
		"desc": "Reads a file's contents into a variable.",
		"dir": "commands/FileRead.htm",
		"syntax": "FileRead, OutputVar, Filename"
	},
	"FileReadLine": {
		"desc": "Reads the specified line  from a file and stores the text in a variable.",
		"dir": "commands/FileReadLine.htm",
		"syntax": "FileReadLine, OutputVar, Filename, LineNum"
	},
	"FileRecycle": {
		"desc": "Sends a file or directory to the recycle bin, if possible.",
		"dir": "commands/FileRecycle.htm",
		"syntax": "FileRecycle, FilePattern"
	},
	"FileRecycleEmpty": {
		"desc": "Empties the recycle bin.",
		"dir": "commands/FileRecycleEmpty.htm",
		"syntax": "FileRecycleEmpty [, DriveLetter]"
	},
	"FileRemoveDir": {
		"desc": "Deletes a folder.",
		"dir": "commands/FileRemoveDir.htm",
		"syntax": "FileRemoveDir, DirName [, Recurse?]"
	},
	"FileSelectFile": {
		"desc": "Displays a standard dialog  that allows the user to open or save file(s).",
		"dir": "commands/FileSelectFile.htm",
		"syntax": "FileSelectFile, OutputVar [, Options, RootDir\\Filename, Prompt, Filter]"
	},
	"FileSelectFolder": {
		"desc": "Displays a standard dialog  that allows the user to select a folder.",
		"dir": "commands/FileSelectFolder.htm",
		"syntax": "FileSelectFolder, OutputVar [, StartingFolder, Options, Prompt]"
	},
	"FileSetAttrib": {
		"desc": "Changes the attributes of one or more files or folders. Wildcards are supported.",
		"dir": "commands/FileSetAttrib.htm",
		"syntax": "FileSetAttrib, Attributes [, FilePattern, OperateOnFolders?, Recurse?]"
	},
	"FileSetTime": {
		"desc": "Changes the  datetime stamp of one or more files or folders. Wildcards are supported.",
		"dir": "commands/FileSetTime.htm",
		"syntax": "FileSetTime [, YYYYMMDDHH24MISS, FilePattern, WhichTime, OperateOnFolders?, Recurse?]"
	},
	"Finally": {
		"desc": "Ensures that one or more statements (commands or expressions) are always executed after the execution of a try statement.",
		"dir": "commands/Finally.htm",
		"syntax": "Finally Statement"
	},
	"For-loop": {
		"desc": "Repeats a series of commands once for each key-value pair in an object.",
		"dir": "commands/For.htm",
		"syntax": "For Key [, Value] in Expression"
	},
	"Format": {
		"desc": "Formats a variable number of input values according to a format string.",
		"dir": "commands/Format.htm",
		"syntax": "String := Format(FormatStr [, Values...])"
	},
	"FormatTime": {
		"desc": "Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format.",
		"dir": "commands/FormatTime.htm",
		"syntax": "FormatTime, OutputVar [, YYYYMMDDHH24MISS, Format]"
	},
	"Func Object": {
		"desc": "Represents a user-defined or built-in function which can be called by the script.",
		"dir": "objects/Func.htm"
	},
	"Func()": {
		"desc": "Retrieves a reference to the specified function.",
		"dir": "commands/Func.htm",
		"syntax": "FunctionReference := Func(FunctionName)"
	},
	"Function Objects": {
		"desc": "\"Function object\" usually means any of the following:",
		"dir": "objects/Functor.htm"
	},
	"GetKeyName/VK/SC()": {
		"desc": "Retrieves the name/text, virtual key code or scan code of a key.",
		"dir": "commands/GetKey.htm",
		"syntax": "String := GetKeyName(Key)\nNumber := GetKeyVK(Key)\nNumber := GetKeySC(Key)"
	},
	"GetKeyState": {
		"desc": "Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status.",
		"dir": "commands/GetKeyState.htm",
		"syntax": "GetKeyState, OutputVar, KeyName [, Mode]\nKeyIsDown := GetKeyState(KeyName [, Mode])"
	},
	"Gosub": {
		"desc": "Jumps to the specified label and continues execution until Return is encountered.",
		"dir": "commands/Gosub.htm",
		"syntax": "Gosub, Label"
	},
	"Goto": {
		"desc": "Jumps to the specified label and continues execution.",
		"dir": "commands/Goto.htm",
		"syntax": "Goto, Label"
	},
	"GroupActivate": {
		"desc": "Activates the next window in a window group that was defined with GroupAdd.  ",
		"dir": "commands/GroupActivate.htm",
		"syntax": "GroupActivate, GroupName [, R]"
	},
	"GroupAdd": {
		"desc": "Adds a window specification to a window group, creating the group if necessary.",
		"dir": "commands/GroupAdd.htm",
		"syntax": "GroupAdd, GroupName [, WinTitle, WinText, Label, ExcludeTitle, ExcludeText]"
	},
	"GroupClose": {
		"desc": "Closes the active window if it was just activated by GroupActivate or GroupDeactivate. It then activates the next window in the series. It can also close all windows in a group.",
		"dir": "commands/GroupClose.htm",
		"syntax": "GroupClose, GroupName [, A|R]"
	},
	"GroupDeactivate": {
		"desc": "Similar to GroupActivate except activates the next window not in the group.",
		"dir": "commands/GroupDeactivate.htm",
		"syntax": "GroupDeactivate, GroupName [, R]"
	},
	"GUI": {
		"desc": "Creates and manages windows and controls. Such windows can be used as data entry forms or custom user interfaces.",
		"dir": "commands/Gui.htm",
		"syntax": "Gui, sub-command [, Param2, Param3, Param4]"
	},
	"GUI Control Types": {
		"desc": "Description: A region containing borderless text that the user cannot edit. Often used to label other controls. Example:",
		"dir": "commands/GuiControls.htm",
		"syntax": "MyFunction(CtrlHwnd, GuiEvent, LinkIndex, HrefOrID)"
	},
	"GUI Styles": {
		"desc": "",
		"dir": "misc/Styles.htm"
	},
	"GuiControl": {
		"desc": "Makes a variety of changes to a control in a GUI window.",
		"dir": "commands/GuiControl.htm",
		"syntax": "GuiControl, Sub-command, ControlID [, Param3]"
	},
	"GuiControlGet": {
		"desc": "Retrieves various types of information about a control in a GUI window.",
		"dir": "commands/GuiControlGet.htm",
		"syntax": "GuiControlGet, OutputVar [, Sub-command, ControlID, Param4]"
	},
	"Hotkey": {
		"desc": "Creates, modifies, enables, or disables a hotkey while the script is running.",
		"dir": "commands/Hotkey.htm",
		"syntax": "Hotkey, KeyName [, Label, Options]\nHotkey, IfWinActive/Exist [, WinTitle, WinText]\nHotkey, If [, Expression]\nHotkey, If, % FunctionObject"
	},
	"if (expression)": {
		"desc": "Specifies the command(s) to perform if an expression evaluates to TRUE.",
		"dir": "commands/IfExpression.htm",
		"syntax": "if (expression)"
	},
	"If var [not] between LowerBound and UpperBound": {
		"desc": "Checks whether a variable's contents are numerically or alphabetically between two values (inclusive).",
		"dir": "commands/IfBetween.htm",
		"syntax": "if Var between LowerBound and UpperBound\nif Var not between LowerBound and UpperBound"
	},
	"If var [not] in/contains value1,value2,...": {
		"desc": "Checks whether a variable's contents match one of the items in a list.",
		"dir": "commands/IfIn.htm",
		"syntax": "if Var in MatchList\nif Var not in MatchList\n\nif Var contains MatchList\nif Var not contains MatchList"
	},
	"If var is [not] type": {
		"desc": "Checks whether a variable's contents are numeric, uppercase, etc.",
		"dir": "commands/IfIs.htm",
		"syntax": "if var is type\nif var is not type"
	},
	"If/IfEqual/IfNotEqual/IfLess/IfLessOrEqual/IfGreater/IfGreaterOrEqual": {
		"desc": "Specifies the command(s) to perform if the comparison of a variable to a value evalutes to TRUE. When more than one command is present, enclose them in a block (braces).",
		"dir": "commands/IfEqual.htm",
		"syntax": "IfEqual, var, value (same: if var = value)\nIfNotEqual, var, value (same: if var  value) (!= can be used in place of )\nIfGreater, var, value (same: if var  value)\nIfGreaterOrEqual, var, value (same: if var = value)\nIfLess, var, value (same: if var  value)\nIfLessOrEqual, var, value (same: if var = value)\nIf var ; If var's contents are blank or 0, it is considered false. Otherwise, it is true.\n\nSee also: IfInString"
	},
	"IfExist / IfNotExist": {
		"desc": "Checks for the existence of a file or folder.",
		"dir": "commands/IfExist.htm",
		"syntax": "IfExist, FilePattern\nIfNotExist, FilePattern\nAttributeString := FileExist(FilePattern)"
	},
	"IfInString / IfNotInString": {
		"desc": "Checks if a variable contains the specified string.",
		"dir": "commands/IfInString.htm",
		"syntax": "IfInString, var, SearchString\nIfNotInString, var, SearchString\nPosition := InStr(Haystack, Needle [, CaseSensitive?, StartingPos]]) ; See the InStr() function for details."
	},
	"IfMsgBox": {
		"desc": "Checks which button was pushed by the user during the most recent MsgBox command.",
		"dir": "commands/IfMsgBox.htm",
		"syntax": "IfMsgBox, ButtonName"
	},
	"IfWinActive / IfWinNotActive / WinActive": {
		"desc": "Checks if the specified window exists and is currently active (foremost). If it is, WinActive() returns its Unique ID (HWND).",
		"dir": "commands/WinActive.htm",
		"syntax": "IfWinActive [, WinTitle, WinText,  ExcludeTitle, ExcludeText]\nIfWinNotActive [, WinTitle, WinText, ExcludeTitle, ExcludeText]\nUniqueID := WinActive(WinTitle, WinText, ExcludeTitle, ExcludeText)"
	},
	"IfWinExist / IfWinNotExist / WinExist": {
		"desc": "Checks if a matching window exists. WinExist() returns the Unique ID (HWND) of the first matching window.",
		"dir": "commands/WinExist.htm",
		"syntax": "IfWinExist [, WinTitle, WinText,  ExcludeTitle, ExcludeText]\nIfWinNotExist [, WinTitle, WinText, ExcludeTitle, ExcludeText]\nUniqueID := WinExist(WinTitle, WinText, ExcludeTitle, ExcludeText)"
	},
	"Image Handles": {
		"desc": "To use an icon or bitmap handle in place of an image filename.",
		"dir": "misc/ImageHandles.htm"
	},
	"ImageSearch": {
		"desc": "Searches a region of the screen for an image.",
		"dir": "commands/ImageSearch.htm",
		"syntax": "ImageSearch, OutputVarX, OutputVarY, X1, Y1, X2, Y2, ImageFile"
	},
	"IniDelete": {
		"desc": "Deletes a value from a standard format .ini file.",
		"dir": "commands/IniDelete.htm",
		"syntax": "IniDelete, Filename, Section [, Key]"
	},
	"IniRead": {
		"desc": "Reads a value, section or list of section names from a standard format .ini file.",
		"dir": "commands/IniRead.htm",
		"syntax": "IniRead, OutputVar, Filename, Section, Key [, Default]\nIniRead, OutputVarSection, Filename, Section\nIniRead, OutputVarSectionNames, Filename\n"
	},
	"IniWrite": {
		"desc": "Writes a value or section to a standard format .ini file.",
		"dir": "commands/IniWrite.htm",
		"syntax": "IniWrite, Value, Filename, Section, Key\nIniWrite, Pairs, Filename, Section"
	},
	"Input": {
		"desc": "Waits for the user to type a string.",
		"dir": "commands/Input.htm",
		"syntax": "Input [, OutputVar, Options, EndKeys, MatchList]"
	},
	"InputBox": {
		"desc": "Displays an input box to ask the user to enter a string.",
		"dir": "commands/InputBox.htm",
		"syntax": "InputBox, OutputVar [, Title, Prompt, HIDE, Width, Height, X, Y, Font, Timeout, Default]"
	},
	"InStr()": {
		"desc": "Searches for a given occurrence of a string, from the left or the right.",
		"dir": "commands/InStr.htm",
		"syntax": "FoundPos := InStr(Haystack, Needle [, CaseSensitive = false, StartingPos = 1, Occurrence = 1])"
	},
	"IsByRef()": {
		"desc": "Returns a non-zero number if a ByRef parameter of a function was supplied with the specified variable.",
		"dir": "commands/IsByRef.htm",
		"syntax": "TrueOrFalse := IsByRef(UnquotedVarName)"
	},
	"IsFunc()": {
		"desc": "Returns a non-zero number if the specified function exists in the script.",
		"dir": "commands/IsFunc.htm",
		"syntax": "MinParamsPlus1 := IsFunc(FunctionName)"
	},
	"IsLabel()": {
		"desc": "Returns a non-zero number if the specified label exists in the script.",
		"dir": "commands/IsLabel.htm",
		"syntax": "TrueOrFalse := IsLabel(LabelName)"
	},
	"IsObject()": {
		"desc": "Returns a non-zero number if the specified value is an object.",
		"dir": "commands/IsObject.htm",
		"syntax": "TrueOrFalse := IsObject(ObjectValue)"
	},
	"KeyHistory": {
		"desc": "Displays script info and a history of the most recent keystrokes and mouse clicks.",
		"dir": "commands/KeyHistory.htm",
		"syntax": "KeyHistory"
	},
	"KeyWait": {
		"desc": "Waits for a key or mouse/joystick button to be released or pressed down.",
		"dir": "commands/KeyWait.htm",
		"syntax": "KeyWait, KeyName [, Options]"
	},
	"Labels": {
		"desc": "A label identifies a line of code, and can be used as a Goto target or to form a subroutine.",
		"dir": "misc/Labels.htm"
	},
	"Language Codes": {
		"desc": "The following list contains the language name that corresponds to each language code that can be contained in the A_Language variable.",
		"dir": "misc/Languages.htm"
	},
	"List of Windows Messages": {
		"desc": "Below is a list of values for the Msg parameter of PostMessage and SendMessage.",
		"dir": "misc/SendMessageList.htm"
	},
	"ListHotkeys": {
		"desc": "Displays the hotkeys in use by the current script, whether their subroutines are currently running, and whether or not they use the keyboard or mouse hook.",
		"dir": "commands/ListHotkeys.htm",
		"syntax": "ListHotkeys"
	},
	"ListLines": {
		"desc": "Displays the script lines most recently executed.",
		"dir": "commands/ListLines.htm",
		"syntax": "ListLines [, On|Off]"
	},
	"ListVars": {
		"desc": "Displays the script's variables: their names and current contents.",
		"dir": "commands/ListVars.htm",
		"syntax": "ListVars"
	},
	"ListView (GUI)": {
		"desc": "A List-View is one of the most elaborate controls provided by the operating system. In its most recognizable form, it displays a tabular view of rows and columns, the most common example of which is Explorer's list of files and folders (detail view).",
		"dir": "commands/ListView.htm"
	},
	"LoadPicture": {
		"desc": "Loads a picture from file and returns a bitmap or icon handle.",
		"dir": "commands/LoadPicture.htm",
		"syntax": "Handle := LoadPicture(Filename [, Options, ByRef ImageType])"
	},
	"Loop": {
		"desc": "Perform a series of commands repeatedly: either the specified number of times or until break is encountered.",
		"dir": "commands/Loop.htm",
		"syntax": "Loop [, Count]"
	},
	"Loop (files  folders)": {
		"desc": "Retrieves the specified files or folders, one at a time.",
		"dir": "commands/LoopFile.htm",
		"syntax": "Loop, Files, FilePattern [, Mode]  ; v1.1.21+ (recommended)"
	},
	"Loop (parse a string)": {
		"desc": "Retrieves substrings (fields) from a string, one at a time.",
		"dir": "commands/LoopParse.htm",
		"syntax": "Loop, Parse, InputVar [, Delimiters, OmitChars]"
	},
	"Loop (read file contents)": {
		"desc": "Retrieves the lines in a text file, one at a time (performs better than FileReadLine).",
		"dir": "commands/LoopReadFile.htm",
		"syntax": "Loop, Read, InputFile [, OutputFile]"
	},
	"Loop (registry)": {
		"desc": "Retrieves the contents of the specified registry subkey, one item at a time.",
		"dir": "commands/LoopReg.htm",
		"syntax": "Loop, Reg, RootKey[\\Key, Mode]  ; v1.1.21+ (recommended)"
	},
	"Math Functions": {
		"desc": "Returns the absolute value of Number.",
		"dir": "commands/Math.htm",
		"syntax": "Value := Abs(Number)"
	},
	"Menu": {
		"desc": "Creates, deletes, modifies and displays menus and menu items. Changes the tray icon and its tooltip. Controls whether the main window of a compiled script can be opened.",
		"dir": "commands/Menu.htm",
		"syntax": "Menu, MenuName, Cmd [, P3, P4, P5]"
	},
	"MenuGetHandle": {
		"desc": "Retrieves the Win32 menu handle of a menu.",
		"dir": "commands/MenuGetHandle.htm",
		"syntax": "Handle := MenuGetHandle(MenuName)"
	},
	"MenuGetName": {
		"desc": "Retrieves the name of a menu given a handle to its underlying Win32 menu.",
		"dir": "commands/MenuGetName.htm",
		"syntax": "MenuName := MenuGetName(Handle)"
	},
	"MouseClick": {
		"desc": "Clicks or holds down a mouse button, or turns the mouse wheel. NOTE: The Click command is generally more flexible and easier to use.",
		"dir": "commands/MouseClick.htm",
		"syntax": "MouseClick [, WhichButton , X, Y, ClickCount, Speed, D|U, R]"
	},
	"MouseClickDrag": {
		"desc": "Clicks and holds the specified mouse button, moves the mouse to the destination coordinates, then releases the button.",
		"dir": "commands/MouseClickDrag.htm",
		"syntax": "MouseClickDrag, WhichButton, X1, Y1, X2, Y2 [, Speed, R]"
	},
	"MouseGetPos": {
		"desc": "Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over.",
		"dir": "commands/MouseGetPos.htm",
		"syntax": "MouseGetPos, [OutputVarX, OutputVarY, OutputVarWin, OutputVarControl, 1|2|3]"
	},
	"MouseMove": {
		"desc": "Moves the mouse cursor.",
		"dir": "commands/MouseMove.htm",
		"syntax": "MouseMove, X, Y [, Speed, R]"
	},
	"MsgBox": {
		"desc": "Displays the specified text in a small window containing one or more buttons (such as Yes and No).",
		"dir": "commands/MsgBox.htm",
		"syntax": "MsgBox, Text\nMsgBox [, Options, Title, Text, Timeout]"
	},
	"NumGet": {
		"desc": "Returns the binary number stored at the specified address+offset.",
		"dir": "commands/NumGet.htm",
		"syntax": "Number := NumGet(VarOrAddress [, Offset = 0][, Type = UPtr])"
	},
	"NumPut": {
		"desc": "Stores a number in binary format at the specified address+offset.",
		"dir": "commands/NumPut.htm",
		"syntax": "NumPut(Number, VarOrAddress [, Offset = 0][, Type = UPtr])"
	},
	"ObjAddRef() / ObjRelease()": {
		"desc": "Increments or decrements an object's reference count.",
		"dir": "commands/ObjAddRef.htm",
		"syntax": "ObjAddRef(Ptr)ObjRelease(Ptr)"
	},
	"ObjBindMethod()": {
		"desc": "Creates a BoundFunc object which calls a method of a given object.",
		"dir": "commands/ObjBindMethod.htm",
		"syntax": "BoundFunc := ObjBindMethod(Obj, Method, Params)"
	},
	"Object": {
		"desc": "AutoHotkey's basic object datatype is an associative array with features which allow its behaviour to be customized.  By default, all objects created by {}, [], Object() and Array() support the following methods:",
		"dir": "objects/Object.htm"
	},
	"OnClipboardChange": {
		"desc": "A label named OnClipboardChange (if it exists) is launched automatically whenever any application (even the script itself) has changed the contents of the clipboard. The label also runs once when the script first starts.",
		"dir": "commands/OnClipboardChange.htm",
		"syntax": "OnClipboardChange(Func [, AddRemove])"
	},
	"OnExit": {
		"desc": "Specifies a subroutine or function to run  automatically when the script exits.",
		"dir": "commands/OnExit.htm",
		"syntax": "OnExit [, Label]\nOnExit(Func [, AddRemove])  ; Requires [v1.1.20+]"
	},
	"OnMessage": {
		"desc": "Specifies a function or function object to call automatically when the script receives the specified message.",
		"dir": "commands/OnMessage.htm",
		"syntax": "OnMessage(MsgNumber [, Function, MaxThreads])"
	},
	"Ord()": {
		"desc": "Returns the ordinal value (numeric character code) of the first character in the specified string.",
		"dir": "commands/Ord.htm",
		"syntax": "Number := Ord(String)"
	},
	"OutputDebug": {
		"desc": "Sends a string to the debugger (if any) for display.",
		"dir": "commands/OutputDebug.htm",
		"syntax": "OutputDebug, Text"
	},
	"Overriding Hotkeys": {
		"desc": "You can disable all built-in Windows hotkeys except Win+L and Win+U by making the following change to the registry (this should work on all OSes but a reboot is probably required):",
		"dir": "misc/Override.htm"
	},
	"Pause": {
		"desc": "Pauses the script's current thread.",
		"dir": "commands/Pause.htm",
		"syntax": "#p::Pause ; Pressing Win+P once will pause the script. Pressing it again will unpause.\nPause [, On|Off|Toggle, OperateOnUnderlyingThread?]"
	},
	"Performance": {
		"desc": "To maximize performance, avoid using SetFormat (except the fast mode) and include the following lines near the top of each script:",
		"dir": "misc/Performance.htm"
	},
	"PixelGetColor": {
		"desc": "Retrieves  the color of the pixel at the specified x,y coordinates.",
		"dir": "commands/PixelGetColor.htm",
		"syntax": "PixelGetColor, OutputVar, X, Y [, Alt|Slow|RGB]"
	},
	"PixelSearch": {
		"desc": "Searches a region of the screen for a pixel of the specified color.",
		"dir": "commands/PixelSearch.htm",
		"syntax": "PixelSearch, OutputVarX, OutputVarY, X1, Y1, X2, Y2, ColorID [, Variation, Fast|RGB]"
	},
	"PostMessage / SendMessage": {
		"desc": "Sends a message to a window or control (SendMessage additionally waits for acknowledgement).",
		"dir": "commands/PostMessage.htm",
		"syntax": "PostMessage, Msg [, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]\nSendMessage, Msg [, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText, Timeout]"
	},
	"PostMessage/SendMessage Tutorial": {
		"desc": "This page discusses the PostMessage and SendMessage commands and will answer some questions like:",
		"dir": "misc/SendMessage.htm"
	},
	"Process": {
		"desc": "Performs one of the following operations on a process: checks if it exists; changes its priority; closes it; waits for it to close.",
		"dir": "commands/Process.htm",
		"syntax": "Process, Cmd [, PID-or-Name, Param3]"
	},
	"Progress/SplashImage": {
		"desc": "Creates or updates a window containing a progress bar or an image.",
		"dir": "commands/Progress.htm",
		"syntax": "SplashImage, Off\nSplashImage [, ImageFile, Options, SubText, MainText, WinTitle, FontName]\n\nProgress, Off\nProgress, ProgressParam1 [, SubText, MainText, WinTitle, FontName]"
	},
	"Random": {
		"desc": "Generates a pseudo-random number.",
		"dir": "commands/Random.htm",
		"syntax": "Random, OutputVar [, Min, Max]\nRandom, , NewSeed"
	},
	"RegDelete": {
		"desc": "Deletes a subkey or value from the registry.",
		"dir": "commands/RegDelete.htm",
		"syntax": "RegDelete, RootKey\\SubKey [, ValueName]  ; v1.1.21+\nRegDelete, RootKey, SubKey [, ValueName]"
	},
	"RegExMatch": {
		"desc": "Determines whether a string contains a pattern (regular expression).",
		"dir": "commands/RegExMatch.htm",
		"syntax": "FoundPos := RegExMatch(Haystack, NeedleRegEx [, UnquotedOutputVar = , StartingPosition = 1])"
	},
	"RegExReplace": {
		"desc": "Replaces occurrences of a pattern (regular expression) inside a string.",
		"dir": "commands/RegExReplace.htm",
		"syntax": "NewStr := RegExReplace(Haystack, NeedleRegEx [, Replacement = , OutputVarCount = , Limit = -1, StartingPosition = 1])"
	},
	"RegisterCallback": {
		"desc": "Creates a machine-code address that when called, redirects the call to a function in the script.",
		"dir": "commands/RegisterCallback.htm",
		"syntax": "Address := RegisterCallback(FunctionName [, Options = , ParamCount = FormalCount, EventInfo = Address])"
	},
	"RegRead": {
		"desc": "Reads a value from the registry.",
		"dir": "commands/RegRead.htm",
		"syntax": "RegRead, OutputVar, RootKey\\SubKey [, ValueName]  ; v1.1.21+\nRegRead, OutputVar, RootKey, SubKey [, ValueName]"
	},
	"Regular Expression Callouts": {
		"desc": "Callouts provide a means of temporarily passing control to the script in the middle of regular expression pattern matching. For detailed information about the PCRE-standard callout feature, see pcre.txt.",
		"dir": "misc/RegExCallout.htm"
	},
	"Regular Expressions (RegEx) - Quick Reference": {
		"desc": "Quick reference for Regular Expressions",
		"dir": "misc/RegEx-QuickRef.htm"
	},
	"RegWrite": {
		"desc": "Writes a value to the registry.",
		"dir": "commands/RegWrite.htm",
		"syntax": "RegWrite, ValueType, RootKey\\SubKey [, ValueName, Value]  ; v1.1.21+\nRegWrite, ValueType, RootKey, SubKey [, ValueName, Value]"
	},
	"Reload": {
		"desc": "Replaces the currently running instance of the script with a new one.",
		"dir": "commands/Reload.htm",
		"syntax": "Reload"
	},
	"Remapping a Joystick to Keyboard or Mouse": {
		"desc": "Below are three approaches, starting at the simplest and ending with the most complex. The most complex method works in the broadest variety of circumstances (such as games that require a key or mouse button to be held down).",
		"dir": "misc/RemapJoystick.htm"
	},
	"Remapping Keys and Buttons": {
		"desc": "Limitation: AutoHotkey's remapping feature described below is generally not as pure and effective as remapping directly via the Windows registry. For the advantages and disadvantages of each approach, see registry remapping.",
		"dir": "misc/Remap.htm"
	},
	"Return": {
		"desc": "Returns from a subroutine to which execution had previously jumped via function-call, Gosub, Hotkey activation, GroupActivate, or other means.",
		"dir": "commands/Return.htm",
		"syntax": "Return [, Expression]"
	},
	"Run / RunWait": {
		"desc": "Runs an external program. Unlike Run, RunWait will wait until\nthe program finishes before continuing.",
		"dir": "commands/Run.htm",
		"syntax": "Run, Target [, WorkingDir, Max|Min|Hide|UseErrorLevel, OutputVarPID]\nRunWait, Target [, WorkingDir, Max|Min|Hide|UseErrorLevel, OutputVarPID]"
	},
	"RunAs": {
		"desc": "Specifies a set of user credentials to use for all subsequent uses of Run and RunWait.",
		"dir": "commands/RunAs.htm",
		"syntax": "RunAs [, User, Password, Domain]"
	},
	"Send/SendRaw/SendInput/SendPlay/SendEvent: Send keys  clicks": {
		"desc": "Sends simulated keystrokes and mouse clicks to the active window.",
		"dir": "commands/Send.htm",
		"syntax": "Send Keys\nSendRaw Keys\nSendInput Keys\nSendPlay Keys\nSendEvent Keys"
	},
	"SendLevel": {
		"desc": "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.",
		"dir": "commands/SendLevel.htm",
		"syntax": "SendLevel, Level"
	},
	"SendMode": {
		"desc": "Makes Send synonymous with SendInput or SendPlay rather than the default (SendEvent). Also makes Click and MouseMove/Click/Drag use the specified method.",
		"dir": "commands/SendMode.htm",
		"syntax": "SendMode Input|Play|Event|InputThenPlay"
	},
	"SetBatchLines": {
		"desc": "Determines how fast a script will run (affects CPU utilization).",
		"dir": "commands/SetBatchLines.htm",
		"syntax": "SetBatchLines, 20ms\nSetBatchLines, LineCount"
	},
	"SetCapsLockState/SetNumLockState/SetScrollLockState": {
		"desc": "Sets the state of the Capslock/NumLock/ScrollLock key. Can also force the key to stay on or off.",
		"dir": "commands/SetNumScrollCapsLockState.htm",
		"syntax": "SetCapsLockState [, State]\nSetNumLockState [, State]\nSetScrollLockState [, State]"
	},
	"SetControlDelay": {
		"desc": "Sets the delay that will occur after each control-modifying command.",
		"dir": "commands/SetControlDelay.htm",
		"syntax": "SetControlDelay, Delay"
	},
	"SetDefaultMouseSpeed": {
		"desc": "Sets the mouse speed that will be used if unspecified in Click and MouseMove/Click/Drag.",
		"dir": "commands/SetDefaultMouseSpeed.htm",
		"syntax": "SetDefaultMouseSpeed, Speed"
	},
	"SetEnv": {
		"desc": "Assigns the specified value to a variable.",
		"dir": "commands/SetEnv.htm",
		"syntax": "SetEnv, Var, Value\nVar = Value"
	},
	"SetFormat": {
		"desc": "Sets the format of integers and floating point numbers generated by math operations.",
		"dir": "commands/SetFormat.htm",
		"syntax": "SetFormat, NumberType, Format"
	},
	"SetKeyDelay": {
		"desc": "Sets the delay that will occur after each keystroke sent by Send and ControlSend.",
		"dir": "commands/SetKeyDelay.htm",
		"syntax": "SetKeyDelay [, Delay, PressDuration, Play]"
	},
	"SetMouseDelay": {
		"desc": "Sets the delay that will occur after each mouse movement or click.",
		"dir": "commands/SetMouseDelay.htm",
		"syntax": "SetMouseDelay, Delay [, Play]"
	},
	"SetRegView": {
		"desc": "Sets the registry view used by RegRead, RegWrite, RegDelete and registry loops.",
		"dir": "commands/SetRegView.htm",
		"syntax": "SetRegView, RegView"
	},
	"SetStoreCapslockMode": {
		"desc": "Whether to restore the state of CapsLock after a Send.",
		"dir": "commands/SetStoreCapslockMode.htm",
		"syntax": "SetStoreCapslockMode, On|Off"
	},
	"SetTimer": {
		"desc": "Causes a subroutine to be launched automatically  and repeatedly at a specified time interval.",
		"dir": "commands/SetTimer.htm",
		"syntax": "SetTimer [, Label, Period|On|Off|Delete, Priority]"
	},
	"SetTitleMatchMode": {
		"desc": "Sets the matching behavior of the WinTitle parameter in commands such as WinWait.",
		"dir": "commands/SetTitleMatchMode.htm",
		"syntax": "SetTitleMatchMode, MatchMode\nSetTitleMatchMode, Fast|Slow"
	},
	"SetWinDelay": {
		"desc": "Sets the delay that will occur after each windowing command, such as WinActivate.",
		"dir": "commands/SetWinDelay.htm",
		"syntax": "SetWinDelay, Delay"
	},
	"SetWorkingDir": {
		"desc": "Changes the script's current working directory.",
		"dir": "commands/SetWorkingDir.htm",
		"syntax": "SetWorkingDir, DirName"
	},
	"Shutdown": {
		"desc": "Shuts down, restarts, or logs off the system.",
		"dir": "commands/Shutdown.htm",
		"syntax": "Shutdown, Code"
	},
	"Sleep": {
		"desc": "Waits the specified amount of time before continuing.",
		"dir": "commands/Sleep.htm",
		"syntax": "Sleep, DelayInMilliseconds"
	},
	"Sort": {
		"desc": "Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).",
		"dir": "commands/Sort.htm",
		"syntax": "Sort, VarName [, Options]"
	},
	"SoundBeep": {
		"desc": "Emits a tone from the PC speaker.",
		"dir": "commands/SoundBeep.htm",
		"syntax": "SoundBeep [, Frequency, Duration]"
	},
	"SoundGet": {
		"desc": "Retrieves various settings from a sound device (master mute, master volume, etc.)",
		"dir": "commands/SoundGet.htm",
		"syntax": "SoundGet, OutputVar [, ComponentType, ControlType, DeviceNumber]"
	},
	"SoundGetWaveVolume": {
		"desc": "Retrieves the wave output volume for a sound device.",
		"dir": "commands/SoundGetWaveVolume.htm",
		"syntax": "SoundGetWaveVolume, OutputVar [, DeviceNumber]"
	},
	"SoundPlay": {
		"desc": "Plays a sound, video, or other supported file type.",
		"dir": "commands/SoundPlay.htm",
		"syntax": "SoundPlay, Filename [, wait]"
	},
	"SoundSet": {
		"desc": "Changes various settings of a sound device (master mute, master volume, etc.)",
		"dir": "commands/SoundSet.htm",
		"syntax": "SoundSet, NewSetting [, ComponentType, ControlType, DeviceNumber]"
	},
	"SoundSetWaveVolume": {
		"desc": "Changes the wave output volume for a sound device.",
		"dir": "commands/SoundSetWaveVolume.htm",
		"syntax": "SoundSetWaveVolume, Percent [, DeviceNumber]"
	},
	"SplashTextOn/SplashTextOff": {
		"desc": "Creates a customizable text popup window.",
		"dir": "commands/SplashTextOn.htm",
		"syntax": "SplashTextOff\nSplashTextOn [, Width, Height, Title, Text]"
	},
	"SplitPath": {
		"desc": "Separates a file name or URL into its name, directory, extension, and drive.",
		"dir": "commands/SplitPath.htm",
		"syntax": "SplitPath, InputVar [, OutFileName, OutDir, OutExtension, OutNameNoExt, OutDrive]"
	},
	"Standard Windows Fonts": {
		"desc": "For use with the Progress, GUI, and SplashImage commands.",
		"dir": "misc/FontsStandard.htm"
	},
	"StatusbarGetText": {
		"desc": "Retrieves the text from a standard status bar control.",
		"dir": "commands/StatusBarGetText.htm",
		"syntax": "StatusBarGetText, OutputVar [, Part#, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"StatusBarWait": {
		"desc": "Waits until a window's status bar contains the specified string.",
		"dir": "commands/StatusBarWait.htm",
		"syntax": "StatusBarWait [, BarText, Seconds, Part#, WinTitle, WinText, Interval, ExcludeTitle, ExcludeText]"
	},
	"StringCaseSense": {
		"desc": "Determines whether string comparisons are case sensitive (default is not case sensitive).",
		"dir": "commands/StringCaseSense.htm",
		"syntax": "StringCaseSense, On|Off|Locale"
	},
	"StringGetPos": {
		"desc": "Retrieves the position of the specified substring within a string.",
		"dir": "commands/StringGetPos.htm",
		"syntax": "StringGetPos, OutputVar, InputVar, SearchText [, L#|R#, Offset]\nPosition := InStr(Haystack, Needle [, CaseSensitive?, StartingPos]) ; See the InStr() function for details."
	},
	"StringLeft / StringRight": {
		"desc": "Retrieves a number of characters from the left or right-hand side of \na string.",
		"dir": "commands/StringLeft.htm",
		"syntax": "StringLeft, OutputVar, InputVar, Count\nStringRight, OutputVar, InputVar, Count\nNewStr := SubStr(String, StartPos [, Length]) ; See the SubStr() function for details."
	},
	"StringLower / StringUpper": {
		"desc": "Converts a string to lowercase or uppercase.",
		"dir": "commands/StringLower.htm",
		"syntax": "StringLower, OutputVar, InputVar [, T]\nStringUpper, OutputVar, InputVar [, T]"
	},
	"StringMid": {
		"desc": "Retrieves one or more characters from the specified position in a string.",
		"dir": "commands/StringMid.htm",
		"syntax": "StringMid, OutputVar, InputVar, StartChar [, Count , L]\nNewStr := SubStr(String, StartPos [, Length]) ; See the SubStr() function for details."
	},
	"StringReplace": {
		"desc": "Replaces the specified substring with a new string.",
		"dir": "commands/StringReplace.htm",
		"syntax": "OutputVar := StrReplace(Haystack, SearchText [, ReplaceText, OutputVarCount, Limit := -1])  ; v1.1.21+\nStringReplace, OutputVar, InputVar, SearchText [, ReplaceText, ReplaceAll?]"
	},
	"StringSplit / StrSplit()": {
		"desc": "Separates a string into an array of substrings using the specified delimiters.",
		"dir": "commands/StringSplit.htm",
		"syntax": "StringSplit, OutputArray, InputVar [, Delimiters, OmitChars]\nArray := StrSplit(String [, Delimiters, OmitChars])  ; [v1.1.13+]"
	},
	"StringTrimLeft / StringTrimRight": {
		"desc": "Removes a number of characters from the left or right-hand side of a \nstring.",
		"dir": "commands/StringTrimLeft.htm",
		"syntax": "StringTrimLeft, OutputVar, InputVar, Count\nStringTrimRight, OutputVar, InputVar, Count\nNewStr := SubStr(String, StartPos [, Length]) ; See the SubStr() function for details."
	},
	"StrLen / StringLen": {
		"desc": "Retrieves the count of how many characters are in a string.",
		"dir": "commands/StringLen.htm",
		"syntax": "OutputVar := StrLen(InputVar)\nStringLen, OutputVar, InputVar\n"
	},
	"StrPut / StrGet": {
		"desc": "Copies a string to or from a memory address, optionally converting to or from a given code page.",
		"dir": "commands/StrPutGet.htm",
		"syntax": "StrPut(String [, Encoding = None ] )\nStrPut(String, Address [, Length] [, Encoding = None ] )\nStrGet(Address [, Length] [, Encoding = None ] )"
	},
	"SubStr()": {
		"desc": "Retrieves one or more characters from the specified position in a string.",
		"dir": "commands/SubStr.htm",
		"syntax": "NewStr := SubStr(String, StartingPos [, Length])"
	},
	"Suspend": {
		"desc": "Disables or enables all or selected hotkeys and hotstrings.",
		"dir": "commands/Suspend.htm",
		"syntax": "Suspend [, Mode]"
	},
	"SysGet": {
		"desc": "Retrieves screen resolution, multi-monitor info, dimensions of system objects, and other system properties.",
		"dir": "commands/SysGet.htm",
		"syntax": "SysGet, OutputVar, Sub-command [, Param3]"
	},
	"Thread": {
		"desc": "Sets the priority or interruptibility of threads. It can also temporarily disable all timers.",
		"dir": "commands/Thread.htm",
		"syntax": "Thread, NoTimers [, false]\nThread, Priority, n\nThread, Interrupt [, Duration, LineCount]"
	},
	"Threads": {
		"desc": "The current thread is defined as the flow of execution invoked by the most recent event; examples include hotkeys, SetTimer subroutines, custom menu items, and GUI events. The current thread can be executing commands within its own subroutine or within other subroutines called by that subroutine.",
		"dir": "misc/Threads.htm"
	},
	"Throw": {
		"desc": "Signals the occurrence of an error. This signal can be caught by a try-catch statement.",
		"dir": "commands/Throw.htm",
		"syntax": "Throw [, Expression]"
	},
	"ToolTip": {
		"desc": "Creates an always-on-top window anywhere on the screen.",
		"dir": "commands/ToolTip.htm",
		"syntax": "ToolTip [, Text, X, Y, WhichToolTip]"
	},
	"Transform": {
		"desc": "Performs miscellaneous math functions, bitwise operations, and tasks such as ASCII/Unicode conversion.",
		"dir": "commands/Transform.htm",
		"syntax": "Transform, OutputVar, Cmd, Value1 [, Value2]"
	},
	"TrayTip": {
		"desc": "Creates a balloon message window near the tray icon. On Windows 10, a toast notification may be shown instead.",
		"dir": "commands/TrayTip.htm",
		"syntax": "TrayTip [, Title, Text, Seconds, Options]"
	},
	"TreeView (GUI)": {
		"desc": "A Tree-View displays a hierarchy of items by indenting child items beneath their parents. The most common example is Explorer's tree of drives and folders.",
		"dir": "commands/TreeView.htm"
	},
	"Trim": {
		"desc": "Trims characters from the beginning and/or end of a string.",
		"dir": "commands/Trim.htm",
		"syntax": "Result :=  Trim(String, OmitChars = \" `t\")\nResult := LTrim(String, OmitChars = \" `t\")\nResult := RTrim(String, OmitChars = \" `t\")"
	},
	"Try": {
		"desc": "Guards one or more statements (commands or expressions) against runtime errors and exceptions thrown by the throw command.",
		"dir": "commands/Try.htm",
		"syntax": "Try Statement"
	},
	"Until": {
		"desc": "Applies a condition to the continuation of a Loop or For-loop.",
		"dir": "commands/Until.htm",
		"syntax": "Loop {\n    ...\n} Until Expression"
	},
	"UrlDownloadToFile": {
		"desc": "Downloads a file from the Internet.",
		"dir": "commands/URLDownloadToFile.htm",
		"syntax": "UrlDownloadToFile, URL, Filename"
	},
	"Var := expression": {
		"desc": "Evaluates an expression and stores the result in a variable.",
		"dir": "commands/SetExpression.htm",
		"syntax": "Var := expression"
	},
	"VarSetCapacity()": {
		"desc": "Enlarges a variable's holding capacity or frees its memory. Normally, this is necessary only for unusual circumstances such as DllCall.",
		"dir": "commands/VarSetCapacity.htm",
		"syntax": "GrantedCapacity := VarSetCapacity(UnquotedVarName [, RequestedCapacity, FillByte])"
	},
	"While-loop": {
		"desc": "Performs a series of commands repeatedly until the specified expression evaluates to false.",
		"dir": "commands/While.htm",
		"syntax": "While Expression\nWhile(Expression)"
	},
	"WinActivate": {
		"desc": "Activates the specified window (makes it foremost).",
		"dir": "commands/WinActivate.htm",
		"syntax": "WinActivate [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinActivateBottom": {
		"desc": "Same as WinActivate except that it activates the bottommost (least recently active) matching window rather than the topmost.",
		"dir": "commands/WinActivateBottom.htm",
		"syntax": "WinActivateBottom [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinClose": {
		"desc": "Closes the specified  window.",
		"dir": "commands/WinClose.htm",
		"syntax": "WinClose [, WinTitle, WinText, SecondsToWait, ExcludeTitle, ExcludeText]"
	},
	"WinGet": {
		"desc": "Retrieves the specified window's unique ID, process ID, process name, or a list of its controls. It can also retrieve a list of all windows matching the specified criteria.",
		"dir": "commands/WinGet.htm",
		"syntax": "WinGet, OutputVar [, Cmd, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinGetActiveStats": {
		"desc": "Combines the functions of WinGetActiveTitle and WinGetPos into one command.",
		"dir": "commands/WinGetActiveStats.htm",
		"syntax": "WinGetActiveStats, Title, Width, Height, X, Y"
	},
	"WinGetActiveTitle": {
		"desc": "Retrieves the title of the active window.",
		"dir": "commands/WinGetActiveTitle.htm",
		"syntax": "WinGetActiveTitle, OutputVar"
	},
	"WinGetClass": {
		"desc": "Retrieves the specified window's class name.",
		"dir": "commands/WinGetClass.htm",
		"syntax": "WinGetClass, OutputVar [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinGetPos": {
		"desc": "Retrieves the position and size of the specified window.",
		"dir": "commands/WinGetPos.htm",
		"syntax": "WinGetPos [, X, Y, Width, Height, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinGetText": {
		"desc": "Retrieves the text from the specified window.",
		"dir": "commands/WinGetText.htm",
		"syntax": "WinGetText, OutputVar [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinGetTitle": {
		"desc": "Retrieves the title of the specified window.",
		"dir": "commands/WinGetTitle.htm",
		"syntax": "WinGetTitle, OutputVar [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinHide": {
		"desc": "Hides the specified window.",
		"dir": "commands/WinHide.htm",
		"syntax": "WinHide [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinKill": {
		"desc": "Forces the specified window to close.",
		"dir": "commands/WinKill.htm",
		"syntax": "WinKill [, WinTitle, WinText, SecondsToWait, ExcludeTitle, ExcludeText]"
	},
	"WinMaximize": {
		"desc": "Enlarges the specified window to its maximum size.",
		"dir": "commands/WinMaximize.htm",
		"syntax": "WinMaximize [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinMenuSelectItem": {
		"desc": "Invokes a menu item from the menu bar of the specified window.",
		"dir": "commands/WinMenuSelectItem.htm",
		"syntax": "WinMenuSelectItem, WinTitle, WinText, Menu [, SubMenu1, SubMenu2, SubMenu3, SubMenu4, SubMenu5, SubMenu6, ExcludeTitle, ExcludeText]"
	},
	"WinMinimize": {
		"desc": "Collapses the specified window into a button on the task bar.",
		"dir": "commands/WinMinimize.htm",
		"syntax": "WinMinimize [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinMinimizeAll / WinMinimizeAllUndo": {
		"desc": "Minimizes or unminimizes all windows.",
		"dir": "commands/WinMinimizeAll.htm",
		"syntax": "WinMinimizeAll\nWinMinimizeAllUndo"
	},
	"WinMove": {
		"desc": "Changes the position and/or size of the specified window.",
		"dir": "commands/WinMove.htm",
		"syntax": "WinMove, X, Y\nWinMove, WinTitle, WinText, X, Y [, Width, Height, ExcludeTitle, ExcludeText]"
	},
	"WinRestore": {
		"desc": "Unminimizes or unmaximizes the specified window if it is minimized or maximized.",
		"dir": "commands/WinRestore.htm",
		"syntax": "WinRestore [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinSet": {
		"desc": "Makes a variety of changes to the specified window, such as always on top and transparency.",
		"dir": "commands/WinSet.htm",
		"syntax": "WinSet, Attribute, Value [, WinTitle, WinText,  ExcludeTitle, ExcludeText]"
	},
	"WinSetTitle": {
		"desc": "Changes the title of the specified window.",
		"dir": "commands/WinSetTitle.htm",
		"syntax": "WinSetTitle, NewTitle\nWinSetTitle, WinTitle, WinText, NewTitle [, ExcludeTitle, ExcludeText]"
	},
	"WinShow": {
		"desc": "Unhides the specified window.",
		"dir": "commands/WinShow.htm",
		"syntax": "WinShow [, WinTitle, WinText, ExcludeTitle, ExcludeText]"
	},
	"WinTitle  Last Found Window": {
		"desc": "Many commands and a few functions have a WinTitle parameter, used to identify which window (or windows) to operate on. This parameter can be the title or partial title of the window, and/or any other criteria described on this page.",
		"dir": "misc/WinTitle.htm"
	},
	"WinWait": {
		"desc": "Waits until the specified window \nexists.",
		"dir": "commands/WinWait.htm",
		"syntax": "WinWait [, WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]"
	},
	"WinWaitActive / WinWaitNotActive": {
		"desc": "Waits until the specified window \nis active or not active.",
		"dir": "commands/WinWaitActive.htm",
		"syntax": "WinWaitActive [, WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]\nWinWaitNotActive [, WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]"
	},
	"WinWaitClose": {
		"desc": "Waits until the specified window\ndoes not exist.",
		"dir": "commands/WinWaitClose.htm",
		"syntax": "WinWaitClose [, WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]"
	}
}